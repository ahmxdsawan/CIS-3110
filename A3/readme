
### 
#### Name: Ahmad Sawan
#### Student ID: 1205975
#### Assignment #: 3 
### 



## Compilation:

    1. type "make"

    2. to run program 1.1 or 1.2, make sure you have the data file(.txt) in the right directory, then

    3. ./P11 or ./P12, depending on what program you want to run, then input the file name when prompted by the program.

    4. to run program 2.1, 2.2, or 2.3, make sure the "data_A2_Q2.txt" file is in the right directory, then

    5. ./P21, ./P22, or ./P23, depending on what program you want to run

## Algorithms implemented:

    1.1: Brute Force.
    1.2: Pre-Sorting using merge sort.
    2.1: Brute Force string search.
    2.2: Horspool algorithm for string search.
    2.3: Boyer Moore algorithm for string search.

## 2.4 - Analyze performance for 2.1, 2.2, and 2.3
    
#### To analyze the performance of the string searches, we will calculate the ratio as follows: Performance Ratio = Total Shifts / Execution Time (in ms). This ratio will give us the number of shifts per millisecond.

1. maintain : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 53 ms
    - Performance Ratio: 35,664
- Harpool's Algorithim:
    - Shifts: 563541
    - Execution Time: 10 ms
    - Performance Ratio: 56,354

2. and : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 55 ms
    - Performance Ratio: 34,367
- Harpool's Algorithim:
    - Shifts: 1697558
    - Execution Time: 30 ms
    - Performance Ratio: 56,585

3. of : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 58 ms
    - Performance Ratio: 32,590
- Harpool's Algorithim:
    - Shifts: 1688102
    - Execution Time: 29 ms
    - Performance Ratio: 58,210

4. colleges : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 50 ms
    - Performance Ratio: 37,804
- Harpool's Algorithim:
    - Shifts: 475484
    - Execution Time: 9 ms
    - Performance Ratio: 52,831

5. university : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 58 ms
    - Performance Ratio: 32,590
- Harpool's Algorithim:
    - Shifts: 434917
    - Execution Time: 8 ms
    - Performance Ratio: 54,364

6. theoretical : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 60 ms
    - Performance Ratio: 31503
- Harpool's Algorithim:
    - Shifts: 410299
    - Execution Time: 7 ms
    - Performance Ratio: 58,614

7. Summer Semester : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 54 ms
    - Performance Ratio: 35,004
- Harpool's Algorithim:
    - Shifts: 618424
    - Execution Time: 12 ms
    - Performance Ratio: 51,535

8. courses conclude : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 59 ms
    - Performance Ratio: 32,037
- Harpool's Algorithim:
    - Shifts: 556073
    - Execution Time: 11 ms
    - Performance Ratio: 50,552

9. October 13 : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 63 ms
    - Performance Ratio: 30,003
- Harpool's Algorithim:
    - Shifts: 564579
    - Execution Time: 11 ms
    - Performance Ratio: 51,325

10. In-course students : 
 - Brute Force Algorthim:
    - Shifts: 1890236
    - Execution Time: 55 ms
    - Performance Ratio: 34,367
- Harpool's Algorithim:
    - Shifts: 446661
    - Execution Time: 10 ms
    - Performance Ratio: 44,666

Final Performance Results:
- Brute Force Average Performance Ratio:
        33,592 ratio
    
- Horspool Average Performance Ratio:
        53,856 ratio


#### In this analysis, we compared the performance of two string searching algorithms: Brute Force and Horspool. We applied these algorithms to ten different strings and measured the number of shifts and execution time for each algorithm. Based on the results, we calculated the performance ratio, which is the number of shifts divided by the execution time.

#### The average performance ratio for the Brute Force algorithm was 33,592, while the Horspool algorithm had an average performance ratio of 53,856. These results indicate that the Horspool algorithm is more efficient than the Brute Force algorithm in terms of both the number of shifts and execution time. Therefore, we recommend using the Horspool algorithm for string searching tasks to achieve better performance.